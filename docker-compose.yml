services:
  app:
    # Use the container image built in the "development" stage of the Dockerfile.
    build: { context: ".", dockerfile: Dockerfile, target: development }
    restart: unless-stopped
    # Propagate environment variables from the host into the container.
    # Note: The `:?` suffix makes it so Docker Compose displays an error if the
    #       environment variable is either (a) undefined, or (b) empty, in the
    #       host environment.
    # Docs: https://docs.docker.com/compose/how-tos/environment-variables/variable-interpolation/#additional-information
    environment:
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME:?}
      MONGO_PASSWORD: ${MONGO_PASSWORD:?}
      MONGO_DATABASE: ${MONGO_DATABASE:?}
    ports:
      # Map a host port (by default, 8000, but it can be overridden via an
      # environment variable) to port 8000 of the container; the latter being
      # the port on which the FastAPI development server listens by default.
      #
      # The environment variable can be specified either via an `.env` file,
      # or by defining it when invoking `docker compose`, like this:
      # ```
      # $ WEB_PORT=1234 docker compose up
      # ```
      #
      - "${WEB_PORT:-8000}:8000"
    volumes:
      # Mount the root directory of the repository, at `/app` within the container.
      - ".:/app"

  mongo:
    image: mongo:8.0.11
    ports:
      # The environment variable can be specified either via an `.env` file,
      # or by defining it when invoking `docker compose`, like this:
      # ```
      # $ MONGO_PORT=12345 docker compose up
      # ```
      - "${MONGO_PORT:-27017}:27017"
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_USERNAME:?}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD:?}"
    volumes:
      - mongo_data:/data/db

  ingest:
    # Use the same container image as the app service for consistency
    build: { context: ".", dockerfile: Dockerfile, target: test }
    # This service should not start automatically - only run on demand
    profiles: ["tools"]
    environment:
      # Note: We use `VIRTUAL_ENV` to customize the path at which `uv` looks for and,
      #       if necessary, creates a Python virtual environment. By using a path
      #       outside of `/app`, we avoid interfering with—and using—any Python
      #       virtual environment the host might have created at `/app/.venv`.
      #       Reference: https://docs.astral.sh/uv/pip/environments/#using-arbitrary-python-environments
      VIRTUAL_ENV: /app_venv
    volumes:
      - "./mongodb/ingest_data.py:/ingest_data.py"
      - "./tests/data:/test_data"  # to access the test data files
    depends_on:
      - mongo
    # Run ingest with data dir mounted to /data
    command: ["uv", "run", "--active", "python", "/ingest_data.py", "--mongo-uri", "mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017", "--input", "/test_data", "--clean"]

  test:
    # Use the same container image as the app service for consistency
    build: { context: ".", dockerfile: Dockerfile, target: test }
    # This service should not start automatically - only run on demand
    profiles: ["tools"]
    volumes:
      # Mount the root directory to access the ingest script and data files
      - ".:/app"
    environment:
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME:?}
      MONGO_PASSWORD: ${MONGO_PASSWORD:?}
      MONGO_DATABASE: ${MONGO_DATABASE:?}  # the test suite will disregard this
      VIRTUAL_ENV: /app_venv
    depends_on:
      - app
      - mongo
    command: ["uv", "run", "--active", "pytest", "-v"]


volumes:
  # Define a named volume that will contain MongoDB data.
  # Note: We use this to persist data across container restarts.
  mongo_data: {}
