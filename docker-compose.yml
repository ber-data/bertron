services:
  app:
    # Use the container image built in the "development" stage of the Dockerfile.
    build: { context: ".", dockerfile: Dockerfile, target: development }
    restart: unless-stopped
    ports:
      # Map a host port (by default, 8000, but it can be overridden via an
      # environment variable) to port 8000 of the container; the latter being
      # the port on which the FastAPI development server listens by default.
      #
      # The environment variable can be specified either via an `.env` file,
      # or by defining it when invoking `docker compose`, like this:
      # ```
      # $ WEB_PORT=1234 docker compose up
      # ```
      #
      - "${WEB_PORT:-8000}:8000"
    volumes:
      # Mount the root directory of the repository, at `/app` within the container.
      - ".:/app"

  mongo:
    image: mongo:8.0.10
    ports:
      # The environment variable can be specified either via an `.env` file,
      # or by defining it when invoking `docker compose`, like this:
      # ```
      # $ MONGO_PORT=12345 docker compose up
      # ```
      - "${MONGO_PORT:-27017}:27017"
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - mongo_data:/data/db

  ingest:
    # Use the same container image as the app service for consistency
    build: { context: ".", dockerfile: Dockerfile, target: development }
    # This service should not start automatically - only run on demand
    profiles: ["tools"]
    environment:
      # Set the MongoDB connection string to connect to the mongo service
      MONGO_URI: "mongodb://admin:root@mongo:27017"
    volumes:
      # Mount the root directory to access the ingest script and data files
      - ".:/app"
    depends_on:
      - mongo
    # Run ingest with data dir mounted to /data
    command: ["uv", "run", "python", "/app/mongodb/ingest_data.py", "--mongo-uri", "mongodb://admin:root@mongo:27017", "--input", "/data"]
<<<<<<< HEAD
=======

  test:
    # Use the same container image as the app service for consistency
    build: { context: ".", dockerfile: Dockerfile, target: development }
    # This service should not start automatically - only run on demand
    profiles: ["tools"]
    depends_on:
      - app
      - mongo
    command: ["uv", "run", "pytest", "-v"]
>>>>>>> main

volumes:
  # Define a named volume that will contain MongoDB data.
  # Note: We use this to persist data across container restarts.
  mongo_data: {}
